"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var lodash_1 = require("lodash");
var Scroller_css_1 = __importDefault(require("./Scroller.css"));
var spinner_1 = __importDefault(require("part:@sanity/components/loading/spinner"));
var Scroller = /** @class */ (function (_super) {
    __extends(Scroller, _super);
    function Scroller() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.scroll = null;
        _this.rootElm = react_1.default.createRef();
        _this.scrollElm = react_1.default.createRef();
        _this.state = {
            lastScrollHeight: 0
        };
        return _this;
    }
    Scroller.prototype.componentDidMount = function () {
        var _this = this;
        if (this.rootElm.current && this.scrollElm.current) {
            var rootElm_1 = this.rootElm.current;
            var scrollElm_1 = this.scrollElm.current;
            this.scroll = this.rootElm.current.addEventListener('scroll', lodash_1.debounce(function () {
                if (rootElm_1.scrollTop + rootElm_1.offsetHeight >= scrollElm_1.scrollHeight - 1200 &&
                    scrollElm_1.scrollHeight !== _this.state.lastScrollHeight) {
                    _this.props.onLoad();
                    _this.setState({ lastScrollHeight: scrollElm_1.scrollHeight });
                }
            }, 100));
        }
    };
    Scroller.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.name !== this.props.name && this.rootElm.current) {
            this.rootElm.current.scrollTo(0, 0);
        }
    };
    Scroller.prototype.componentWillUnmount = function () {
        if (this.scroll && this.rootElm.current) {
            this.rootElm.current.removeEventListener('scroll', this.scroll);
        }
    };
    Scroller.prototype.render = function () {
        var isLoading = this.props.isLoading;
        return (react_1.default.createElement("div", { className: Scroller_css_1.default.root, ref: this.rootElm },
            react_1.default.createElement("div", { className: Scroller_css_1.default.content, ref: this.scrollElm },
                this.props.children,
                isLoading && (react_1.default.createElement(spinner_1.default, { center: true })))));
    };
    return Scroller;
}(react_1.default.Component));
exports.default = Scroller;
//# sourceMappingURL=Scroller.js.map